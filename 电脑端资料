
###########################################################################################
2020/5/24 11：50  平板知识点

C#中数组、集合（ArrayList）、泛型集合List<T>、字典(dictionary<TKey,TValue>)全面对比
https://www.cnblogs.com/JK1989/p/6679523.html

----------------------------------------------------------------------------------------------
C#Lambda表达式：我为什么要使用它们？
http://www.imooc.com/wenda/detail/568280
匿名委托：delegate int del(int i);del myDelegate = x => x * x;int j = myDelegate(5); //j = 25

C# Lambda表达式与委托
https://www.jb51.net/article/32846.htm
三段代码 很显然，使用Lambda表达式使代码更为简洁。

C# 匿名委托与实名委托 定义与调用 
https://blog.csdn.net/wilson_guo/article/details/44978617
 
· 问题: 实名委托 => 匿名委托 => 拉姆表达式   ( 他们各自的定义与调用与优点  )
 --------------------------------------------------------------------------------------------
  总结:https://www.cnblogs.com/mq0036/p/7427892.html
  
  
    Lambda 表达式是一个匿名函数，它可以包含表达式和语句，并且可用于创建委托或表达式目录树类型。

·  // Lambda 表达式 
   Func<int, bool> dele1 = n => n > 10; 
   // Lambda 语句 
   Func<int, bool> dele2 = (int n) => { return n > 10; }; 
 
 
· Lambda也是一种表达式，但是可以表示匿名委托，也可以表示表达式树。
  Expression<Func<int, bool>> expr = i => i < 5;
  以上可以，但是这样就不行：
  Expression<Func<int, bool>> expr = delegate(int i) {   return i < 5; };
  会提示「无法将匿名表达式转换为表达式树」

· 委托---匿名委托---lambda（简化的过程，本质是一样的）
  委托：必须有明确的委托申明、赋值，然后才可以调用。
  匿名委托：可以没有委托的申明、赋值，可以直接传递与委托定义相匹配的方法直接调用
  lambda：进一步简化匿名委托，直接简化成：(输入参数)=>{方法体}




##########################################################################################
